<script>
  // Define handleImageError function early to prevent reference errors
  function handleImageError(img) {
    console.log('Image failed to load:', img.src);
    // Try different fallback sources in order of preference
    const fallbackSrc = img.getAttribute('data-fallback') || '/img/default-character.svg';
    
    // Only change the source if it's different from current source
    if (img.src !== fallbackSrc) {
      console.log('Setting fallback image:', fallbackSrc);
      img.src = fallbackSrc;
      
      // Add secondary fallback if needed
      img.onerror = function() {
        if (img.src !== '/img/default-character.svg') {
          console.log('Using final fallback image');
          img.src = '/img/default-character.svg';
          img.onerror = null; // Prevent infinite loops
        }
      };
    } else {
      // If already using the fallback, try one last option
      img.src = '/img/default-character.svg';
      img.onerror = null; // Prevent infinite loops
    }
  }
  
  // Make function globally available
  window.handleImageError = handleImageError;

  // Add markdown formatter
  function formatSimpleMarkdown(text) {
    if (!text) return '';
    text = text.replace(/[&<>"']/g, function(m) {
      return ({
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      })[m];
    });
    text = text.replace(/(^|\n)---+\n?/g, '$1<hr class="divider">\n');
    text = text.replace(/\*\*(.+?)\*\*/g, '<span class="bold">$1</span>');
    text = text.replace(/__(.+?)__/g, '<span class="underline">$1</span>');
    text = text.replace(/\*(.+?)\*/g, '<span class="italic">$1</span>');
    text = text.replace(/(^|\n)&gt; (.+)/g, '$1<span class="quote">$2</span>');
    text = text.replace(/\n/g, '<br>');
    return text;
  }

  function applyFormattingToFeed() {
    document.querySelectorAll('.formatted-text').forEach(function(el) {
      if (!el.dataset.formatted) {
        el.innerHTML = formatSimpleMarkdown(el.textContent);
        el.dataset.formatted = "true";
      }
    });
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Apply markdown formatting to all .formatted-text elements on load
    applyFormattingToFeed();
  });
</script>

<div class="container">
  <div class="row">
    <!-- Left Sidebar -->
    <div class="col-3 sidebar-left">
      <div class="profile-summary card">
        
        <div class="profile-stats">
          <div class="stat-item" data-stat="posts">
            <span class="stat-value"><%= stats ? stats.posts : 0 %></span>
            <span class="stat-label">Posts</span>
          </div>
          <div class="stat-item" data-stat="followers">
            <span class="stat-value"><%= stats ? stats.followers : 0 %></span>
            <span class="stat-label">Followers</span>
          </div>
          <div class="stat-item" data-stat="following">
            <span class="stat-value"><%= stats ? stats.following : 0 %></span>
            <span class="stat-label">Following</span>
          </div>
        </div>
        
        <div class="character-selector">
          <h4>Post as:</h4>
          <% if (characters && characters.length > 0) { %>
            <select id="character-select" class="form-control" required>
              <option value="">Post as Yourself</option>
              <% characters.forEach(character => { %>
                <option value="<%= character.id %>" data-avatar="<%= character.url || '/img/default-character.svg' %>"><%= character.name %></option>
              <% }) %>
            </select>
            <!-- Active posting identity display -->
            <div class="active-posting-identity mt-3">
              <div class="no-character-selected">
                <p class="text-center text-muted">Posting as <strong>yourself</strong></p>
              </div>
              <div class="post-as-character-display" style="display: none;">
                <img src="/img/default-character.svg" 
                     alt="Character" 
                     class="active-character-avatar"
                     data-fallback="/img/default-character.svg"
                     onerror="handleImageError(this)">
                <div class="posting-as-text">
                  Posting as <strong class="active-character-name">Character</strong>
                </div>
              </div>
            </div>
          <% } else { %>
            <div class="alert alert-info mt-2">
              <p class="mb-0">You need to <a href="/characters/create">create a character</a> before posting as a character.</p>
            </div>
          <% } %>
        </div>
      </div>
      
      <div class="navigation-menu card mt-3">
        <ul class="nav-list">
          <li><a href="/social/feed" class="active"><i class="ph-duotone ph-list"></i> Home Feed</a></li>
          <li><a href="/social/explore"><i class="ph-duotone ph-list-magnifying-glass"></i> Explore</a></li>
          <li><a href="/social/notifications"><i class="ph-duotone ph-notification"></i> Notifications</a></li>
          <li><a href="/social/bookmarks"><i class="ph-duotone ph-bookmarks"></i> Bookmarks</a></li>
        </ul>
      </div>
    </div>
    
    <!-- Main Content -->
    <div class="col-6">
      <div class="create-post-container card mb-3 <%= !characters || characters.length === 0 ? 'no-character' : '' %>">
        <div class="create-post-header">
          <h3>Create Post</h3>
          <div class="current-posting-as">
            <div class="post-type-selector">
              <button class="type-btn active" data-type="text"><i class="ph-duotone ph-twitter-logo"></i> Text</button>
              <button class="type-btn" data-type="image"><i class="ph-duotone ph-instagram-logo"></i> Image</button>
              <button class="type-btn" data-type="video"><i class="ph-duotone ph-tiktok-logo"></i> Video</button>
              <button class="type-btn" data-type="poll"><i class="ph-duotone ph-question"></i> Poll</button>
              <button class="type-btn" data-type="event"><i class="ph-duotone ph-calendar-plus"></i> Event</button>
            </div>
          </div>
        </div>
        
        <form id="post-form" action="/social/post/create" method="POST">
          <input type="hidden" name="postType" id="post-type" value="text">
          <input type="hidden" name="characterId" id="character-id" value="">
          
          <!-- Character selection warning -->
          <div id="character-required-warning" class="alert alert-warning mb-3" style="display:none;">
            <strong>Select a character</strong> - You must select a character before posting.
          </div>
          
          <div class="form-group">
            <input type="text" name="title" class="form-control" placeholder="Title (optional)" />
          </div>
          
          <div class="text-styling-toolbar" id="post-toolbar">
            <div class="toolbar-group">
              <button type="button" class="toolbar-btn" id="toolbar-bold" data-command="bold"><i class="ph-duotone ph-text-b"></i></button>
              <button type="button" class="toolbar-btn" id="toolbar-italic" data-command="italic"><i class="ph-duotone ph-text-italic"></i></button>
              <button type="button" class="toolbar-btn" id="toolbar-underline" data-command="underline"><i class="ph-duotone ph-text-a-underline"></i></button>
            </div>
            <div class="toolbar-group">
              <button type="button" class="toolbar-btn" id="toolbar-h2" data-command="h2"><i class="ph-duotone ph-text-h-two"></i></button>
              <button type="button" class="toolbar-btn" id="toolbar-h3" data-command="h3"><i class="ph-duotone ph-text-h-three"></i></button>
              <button type="button" class="toolbar-btn" id="toolbar-quote" data-command="quote"><i class="ph-duotone ph-quotes"></i></button>
            </div>
          </div>
          
          <div class="form-group">
            <textarea name="content" id="post-content" class="form-control" rows="4" placeholder="What's on your mind?"></textarea>
          </div>
          
          <!-- Image URL Area (initially hidden) -->
          <div class="form-group url-area" id="image-url-area" style="display:none;">
            <label for="image-url">Image URLs</label>
            <div class="input-group">
              <input type="text" id="image-url" class="form-control" placeholder="Enter image URL">
              <div class="input-group-append">
                <button type="button" id="paste-image-url" class="btn btn-secondary" title="Paste from clipboard">
                  <i class="ph-duotone ph-clipboard-text"></i>
                </button>
                <button type="button" id="add-image-url" class="btn btn-primary">Add</button>
              </div>
            </div>
            <p class="form-text text-muted">Enter direct links to image files (.jpg, .png, .gif)</p>
            <div id="image-urls-container" class="image-preview-container"></div>
          </div>
          
          <!-- Video URL Area (initially hidden) -->
          <div class="form-group url-area" id="video-url-area" style="display:none;">
            <label for="video-url">Video URL</label>
            <input type="text" id="video-url" name="videoUrl" class="form-control" placeholder="YouTube, Vimeo, or direct video URL">
            <p class="form-text text-muted">Supports YouTube, Vimeo, or direct links to video files</p>
            <div class="video-preview-container" id="video-preview"></div>
          </div>
          
          <!-- Poll Creation Area (initially hidden) -->
          <div class="form-group poll-area" id="poll-area" style="display:none;">
            <label>Create Poll</label>
            <div id="poll-options">
              <div class="poll-option">
                <div class="d-flex gap-2">
                  <input type="text" name="pollOptions[]" class="form-control" placeholder="Option 1">
                </div>
              </div>
              <div class="poll-option">
                <div class="d-flex gap-2">
                  <input type="text" name="pollOptions[]" class="form-control" placeholder="Option 2">
                </div>
              </div>
            </div>
            <button type="button" id="add-poll-option" class="btn btn-outline mt-2">+ Add Option</button>
          </div>
          
          <!-- Event Creation Area (initially hidden) -->
          <div class="form-group event-area" id="event-area" style="display:none;">
            <div class="row">
              <div class="col-6">
                <label for="event-date">Date</label>
                <input type="date" id="event-date" name="eventDate" class="form-control">
              </div>
              <div class="col-6">
                <label for="event-time">Time</label>
                <input type="time" id="event-time" name="eventTime" class="form-control">
              </div>
            </div>
            <div class="form-group mt-2">
              <label for="event-location">Location</label>
              <input type="text" id="event-location" name="eventLocation" class="form-control" placeholder="Event location">
            </div>
          </div>
          
          <div class="form-group">
            <label for="post-tags">Tags (separated by comma)</label>
            <input type="text" id="post-tags" name="tags" class="form-control" placeholder="hockey, toronto, etc.">
          </div>
          
          <div class="post-form-actions d-flex justify-between">
            <select name="privacy" class="form-control privacy-select">
              <option value="public">Public</option>
              <option value="followers">Followers Only</option>
              <option value="private">Private</option>
            </select>
            <button type="submit" id="post-submit-btn" class="btn btn-primary" <%= !characters || characters.length === 0 ? 'disabled' : '' %>>Post</button>
          </div>
        </form>
      </div>
      
      <div class="feed-filter-bar">
        <button class="filter-btn active" data-filter="all">All Posts</button>
        <button class="filter-btn" data-filter="following">Following</button>
        <button class="filter-btn" data-filter="team">Team</button>
      </div>
      
      <div class="posts-container" data-page="1">
        <% if (posts && posts.length) { %>
          <% posts.forEach(post => { %>
            <div class="post-card card">
              <div class="post-header">
                <div class="post-author">
                  <% if (post.character_id) { %>
                    <img src="<%= post.character_avatar || post.url || '/img/default-character.svg' %>" 
                         alt="<%= post.character_name %>" 
                         class="post-avatar"
                         data-fallback="/img/default-character.svg"
                         onerror="handleImageError(this)">
                    <div class="author-info">
                      <h4><%= post.character_name %></h4>
                      <p class="author-meta">@<%= post.username %> • <%= new Date(post.created_at).toLocaleString() %></p>
                    </div>
                  <% } else { %>
                    <div class="post-avatar-placeholder">
                      <i class="icon-user"></i>
                    </div>
                    <div class="author-info">
                      <h4>@<%= post.username %></h4>
                      <p class="author-meta"><%= new Date(post.created_at).toLocaleString() %></p>
                    </div>
                  <% } %>
                </div>
                <div class="post-options">
                  <button class="options-btn"><i class="icon-options"></i></button>
                </div>
              </div>
              
              <% if (post.title) { %>
                <h3 class="post-title"><%= post.title %></h3>
              <% } %>
              
              <div class="post-content formatted-text">
                <%- formatSimpleMarkdown(post.content) %>
              </div>
              
              <% if (post.media && post.media.length) { %>
                <div class="post-media">
                  <% if (post.post_type === 'image') { %>
                    <div class="image-gallery">
                      <% post.media.forEach(media => { %>
                        <img src="<%= media.url %>" 
                             alt="Post image" 
                             class="post-image" 
                             data-fallback="/img/broken-image.png"
                             onerror="this.src='/img/broken-image.png'; console.error('Failed to load image:', this.src);">
                        <% /* console.log("Rendering image URL:", media.url); */ %>
                      <% }); %>
                    </div>
                  <% } else if (post.post_type === 'video') { %>
                    <% 
                      // Helper: Detect YouTube/Vimeo/direct video
                      function getVideoEmbed(url) {
                        if (!url) return '';
                        // YouTube
                        const ytMatch = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([A-Za-z0-9_\-]+)/);
                        if (ytMatch) {
                          return `<div class="youtube-embed-container"><iframe src="https://www.youtube.com/embed/${ytMatch[1]}" frameborder="0" allowfullscreen></iframe></div>`;
                        }
                        // Vimeo
                        const vimeoMatch = url.match(/vimeo\.com\/(\d+)/);
                        if (vimeoMatch) {
                          return `<div class="youtube-embed-container"><iframe src="https://player.vimeo.com/video/${vimeoMatch[1]}" frameborder="0" allowfullscreen></iframe></div>`;
                        }
                        // TikTok
                        const tiktokMatch = url.match(/tiktok\.com\/(@[\w\d\.\-_]+)\/video\/(\d+)/);
                        if (tiktokMatch) {
                          return `<div class="tiktok-embed-container"><iframe src="https://www.tiktok.com/embed/v2/${tiktokMatch[2]}" frameborder="0" allowfullscreen></iframe></div>`;
                        }
                        // Direct video file
                        if (url.match(/\.(mp4|webm|ogg)$/i)) {
                          return `<div class="direct-video-container"><video class="direct-video-player" controls><source src="${url}" type="video/mp4">Your browser does not support the video tag.</video></div>`;
                        }
                        // Fallback: just a link
                        return `<a href="${url}" target="_blank" rel="noopener">View Video</a>`;
                      }
                    %>
                    <% if (post.media[0] && post.media[0].url) { %>
                      <%- getVideoEmbed(post.media[0].url) %>
                    <% } %>
                  <% } %>
                </div>
              <% } else if (post.post_type === 'image') { %>
                <div class="post-media-missing">
                  <p class="text-muted"><em>Image(s) unavailable</em></p>
                </div>
              <% } %>
              
              <% if (post.post_type === 'poll' && post.poll_options && Array.isArray(post.poll_options)) { %>
                <div class="post-poll" data-post-id="<%= post.id %>">
                  <% post.poll_options.forEach(option => { %>
                    <div class="poll-option-result" data-option-id="<%= option.id %>" data-post-id="<%= post.id %>">
                      <div class="poll-option-text"><%= option && option.text ? option.text : 'No option text' %></div>
                      <div class="poll-progress-bar">
                        <div class="poll-progress" data-percentage="<%= option && typeof option.percentage === 'number' ? option.percentage : 0 %>"></div>
                      </div>
                      <div class="poll-percentage"><%= option && typeof option.percentage === 'number' ? option.percentage : 0 %>%</div>
                    </div>
                  <% }); %>
                  <div class="poll-votes-count"><%= post.total_votes || 0 %> votes</div>
                  <div class="poll-vote-actions">
                    <button class="btn btn-sm btn-outline poll-vote-btn" data-post-id="<%= post.id %>">Vote</button>
                  </div>
                </div>
              <% } %>
              
              <% if (post.post_type === 'event') { %>
                <div class="post-event" data-post-id="<%= post.id %>">
                  <div class="event-details">
                    <div class="event-date">
                      <i class="ph-duotone ph-calendar-blank"></i> <%= new Date(post.event_date).toLocaleDateString() %>
                    </div>
                    <div class="event-time">
                      <i class="ph-duotone ph-timer"></i> <%= post.event_time %>
                    </div>
                    <div class="event-location">
                      <i class="ph-duotone ph-map-pin"></i> <%= post.event_location %>
                    </div>
                  </div>
                  <div class="event-actions">
                    <button class="btn btn-outline btn-sm event-interested-btn">
                      <i class="ph-duotone ph-star"></i> Interested <span class="interested-count">0</span>
                    </button>
                    <button class="btn btn-primary btn-sm event-going-btn">
                      <i class="ph-duotone ph-check"></i> Going <span class="going-count">0</span>
                    </button>
                  </div>
                </div>
              <% } %>
              
              <div class="post-tags">
                <% if (post.tags && post.tags.length) { %>
                  <% post.tags.forEach(tag => { %>
                    <a href="/social/tag/<%= tag.name %>" class="post-tag">#<%= tag.name %></a>
                  <% }) %>
                <% } %>
              </div>
              
              <div class="post-actions">
                <button class="action-btn like-btn <%= post.liked ? 'active' : '' %>" data-post-id="<%= post.id %>">
                  <i class="ph-duotone ph-thumbs-up"></i> <span class="like-count"><%= post.like_count || 0 %></span>
                </button>
                <button class="action-btn comment-btn" data-post-id="<%= post.id %>">
                  <i class="ph-duotone ph-chat"></i> <span class="comment-count"><%= post.comment_count || 0 %></span>
                </button>
                <button class="action-btn share-btn" data-post-id="<%= post.id %>">
                  <i class="ph-duotone ph-share"></i>
                </button>
                <button class="action-btn bookmark-btn <%= post.bookmarked ? 'active' : '' %>" data-post-id="<%= post.id %>">
                  <i class="ph-duotone ph-bookmark"></i>
                </button>
              </div>
              
              <div class="post-comments">
                <% if (post.comments && post.comments.length) { %>
                  <div class="comments-header">
                    <h4>Comments (<%= post.comments.length %>)</h4>
                    <button class="toggle-comments-btn">Show Comments</button>
                  </div>
                  <div class="comments-list" style="display: none;">
                    <% post.comments.forEach(comment => { %>
                      <div class="comment">
                        <div class="comment-avatar">
                          <% if (comment.character_id) { %>
                            <img src="<%= comment.character_avatar || comment.url || '/img/default-character.svg' %>" 
                                 alt="<%= comment.character_name %>"
                                 data-fallback="/img/default-character.svg"
                                 onerror="handleImageError(this)">
                          <% } else { %>
                            <div class="comment-avatar-placeholder">
                              <i class="icon-user"></i>
                            </div>
                          <% } %>
                        </div>
                        <div class="comment-content">
                          <div class="comment-header">
                            <% if (comment.character_id) { %>
                              <h5><%= comment.character_name %> <span class="comment-username">@<%= comment.username %></span></h5>
                            <% } else { %>
                              <h5>@<%= comment.username %></h5>
                            <% } %>
                            <span class="comment-date"><%= new Date(comment.created_at).toLocaleString() %></span>
                          </div>
                          <p><%= comment.content %></p>
                          <div class="comment-actions">
                            <button class="comment-action-btn reply-btn" data-comment-id="<%= comment.id %>">Reply</button>
                            <button class="comment-action-btn like-btn" data-comment-id="<%= comment.id %>">Like</button>
                          </div>
                        </div>
                      </div>
                    <% }) %>
                  </div>
                <% } %>
                
                <div class="add-comment-form">
                  <div class="comment-form-header">
                    <div class="comment-form-avatar comment-avatar-container">
                      <% if (!characters || characters.length === 0) { %>
                        <div class="character-select-required">
                          Create a character first
                        </div>
                      <% } %>
                      <div class="comment-avatar-placeholder">
                        <i class="ph-duotone ph-user"></i>
                      </div>
                    </div>
                    <textarea class="form-control comment-input" placeholder="Write a comment as your character..." data-post-id="<%= post.id %>"></textarea>
                  </div>
                  <div class="comment-form-footer">
                    <button class="btn btn-primary btn-sm submit-comment-btn" data-post-id="<%= post.id %>" <%= !characters || characters.length === 0 ? 'disabled' : '' %>>Comment</button>
                  </div>
                </div>
              </div>
            </div>
          <% }) %>
        <% } else { %>
          <div class="empty-feed card">
            <div class="empty-feed-message">
              <i class="ph-duotone ph-chat-circle"></i>
              <h3>No Posts Yet</h3>
              <p>Be the first to create a post or follow people to see their posts here!</p>
            </div>
          </div>
        <% } %>
      </div>
      
      <% if (posts && posts.length && hasMore) { %>
        <div class="load-more mb-3">
          <button id="load-more-btn" class="btn btn-outline" data-page="1">Load More</button>
        </div>
      <% } %>
    </div>
    
    <!-- Right Sidebar -->
    <div class="col-3 sidebar-right">
      <div class="widget suggested-users card">
        <h4 class="widget-title">Suggested Characters</h4>
        <ul class="suggested-list">
          <!-- Store client-side character ID in a variable that will be populated by JavaScript after page load -->
          <input type="hidden" id="client-selected-character" value="0">
          
          <script>
            // This will run in the browser after the page loads
            document.addEventListener('DOMContentLoaded', function() {
              // Get the currently selected character ID from session storage
              const clientSelectedCharacterId = parseInt(sessionStorage.getItem('selectedCharacterId') || '0');
              
              // Set the hidden input value - add safety check first
              const clientSelectedCharElement = document.getElementById('client-selected-character');
              if (clientSelectedCharElement) {
                clientSelectedCharElement.value = clientSelectedCharacterId;
                console.log('Client-side selected character ID:', clientSelectedCharacterId);
              } else {
                console.warn('client-selected-character element not found');
              }
              
              // Instead of just filtering, refresh suggestions from server to get properly filtered list
              if (clientSelectedCharacterId) {
                // Add a short delay to ensure the selection is properly initialized
                setTimeout(() => {
                  if (typeof refreshSuggestedCharacters === 'function') {
                    refreshSuggestedCharacters(clientSelectedCharacterId);
                  } else {
                    console.warn('refreshSuggestedCharacters function not available');
                    // Fallback to simple client-side filtering
                    if (typeof filterSuggestedCharacters === 'function') {
                      filterSuggestedCharacters(clientSelectedCharacterId);
                    } else {
                      console.warn('filterSuggestedCharacters function not available');
                    }
                  }
                }, 500);
              } else {
                // Just use client-side filtering if no character selected
                if (typeof filterSuggestedCharacters === 'function') {
                  filterSuggestedCharacters(clientSelectedCharacterId);
                }
              }
              
              // Also listen for character selection changes
              const characterSelect = document.getElementById('character-select');
              if (characterSelect) {
                characterSelect.addEventListener('change', function() {
                  // When character changes, update the hidden field
                  const newCharId = parseInt(this.value) || 0;
                  const clientSelectedCharElement = document.getElementById('client-selected-character');
                  if (clientSelectedCharElement) {
                    clientSelectedCharElement.value = newCharId;
                  }
                  
                  // Use server-side refresh instead of client filtering
                  if (typeof refreshSuggestedCharacters === 'function' && newCharId) {
                    refreshSuggestedCharacters(newCharId);
                  } else {
                    // Fallback to client-side filtering
                    if (typeof filterSuggestedCharacters === 'function') {
                      filterSuggestedCharacters(newCharId);
                    }
                  }
                });
              }
            });
            
            // Function to filter suggested characters in the client side
            function filterSuggestedCharacters(selectedCharId) {
              if (!selectedCharId) return;
              
              console.log('Filtering suggested characters, hiding character ID:', selectedCharId);
              
              // Hide any suggestion items that match the selected character ID
              let hiddenCount = 0;
              let totalCount = 0;
              const allItems = document.querySelectorAll('.suggested-item');
              totalCount = allItems.length;
              
              allItems.forEach(item => {
                const charId = parseInt(item.getAttribute('data-character-id'));
                if (charId === selectedCharId) {
                  console.log('Hiding suggestion for selected character:', charId);
                  item.style.display = 'none';
                  hiddenCount++;
                } else {
                  // Make sure other items are visible
                  item.style.display = 'flex';
                }
              });
              
              // Check if we need to show the "no suggestions" message
              if (hiddenCount === totalCount || totalCount === 0) {
                console.log('All suggestions are hidden or none available, showing no suggestions message');
                
                // Check if we already have a no-suggestions element
                if (!document.querySelector('.suggested-list .no-suggestions')) {
                  const noSuggestionsItem = document.createElement('li');
                  noSuggestionsItem.className = 'no-suggestions';
                  noSuggestionsItem.innerHTML = `
                    <p>No more character suggestions available.</p>
                    <a href="/characters/explore" class="btn btn-sm btn-primary mt-2">Find Characters</a>
                    <button class="btn btn-sm btn-outline refresh-btn mt-2">Refresh Suggestions</button>
                  `;
                  
                  // Add refresh handler
                  noSuggestionsItem.querySelector('.refresh-btn').addEventListener('click', function() {
                    if (typeof refreshSuggestedCharacters === 'function') {
                      refreshSuggestedCharacters(selectedCharId);
                    }
                  });
                  
                  // Add it to the list
                  document.querySelector('.suggested-list').appendChild(noSuggestionsItem);
                } else {
                  // Make sure it's visible
                  document.querySelector('.suggested-list .no-suggestions').style.display = 'block';
                }
              } else {
                // Hide the no-suggestions message if it exists
                const noSuggestions = document.querySelector('.suggested-list .no-suggestions');
                if (noSuggestions) {
                  noSuggestions.style.display = 'none';
                }
              }
            }
            
            // Function to refresh suggested characters from the server
            function refreshSuggestedCharacters(selectedCharId) {
              console.log('Refreshing suggested characters, excluding:', selectedCharId);
              
              // Show a loading state on the suggestions list
              const suggestedList = document.querySelector('.suggested-list');
              if (!suggestedList) return;
              
              // Add loading indicator
              const loadingItem = document.createElement('li');
              loadingItem.className = 'loading-suggestions';
              loadingItem.innerHTML = `
                <div class="loading-spinner">
                  <div class="spinner-border spinner-border-sm text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                </div>
                <p>Loading fresh suggestions...</p>
              `;
              
              // Clear existing list and show loading
              suggestedList.innerHTML = '';
              suggestedList.appendChild(loadingItem);
              
              // Make AJAX request to get new suggestions
              fetch(`/social/suggested-characters?exclude=${selectedCharId}`)
                .then(response => {
                  if (!response.ok) {
                    throw new Error('Network response was not ok');
                  }
                  return response.json();
                })
                .then(data => {
                  // Remove loading indicator
                  suggestedList.innerHTML = '';
                  
                  if (data.success && data.characters && data.characters.length > 0) {
                    // Populate with new characters
                    data.characters.forEach(character => {
                      const item = document.createElement('li');
                      item.className = 'suggested-item';
                      item.setAttribute('data-character-id', character.id);
                      
                      item.innerHTML = `
                        <div class="suggested-avatar">
                          <img src="${character.avatar_url || character.url || '/img/default-character.svg'}" 
                               alt="${character.name}"
                               data-fallback="/img/default-character.svg"
                               onerror="handleImageError(this)" />
                        </div>
                        <div class="suggested-info">
                          <a href="/social/profile/${character.url || character.id}" class="suggested-name">${character.name}</a>
                          <span class="suggested-meta">by @${character.creator_username}</span>
                        </div>
                        <button class="btn btn-sm btn-outline follow-btn" data-character-id="${character.id}">
                          <i class="ph-duotone ph-plus"></i> Follow
                        </button>
                      `;
                      
                      suggestedList.appendChild(item);
                    });
                    
                    // Re-attach follow button handlers
                    attachFollowButtonHandlers();
                  } else {
                    // Show no suggestions message
                    const noSuggestionsItem = document.createElement('li');
                    noSuggestionsItem.className = 'no-suggestions';
                    noSuggestionsItem.innerHTML = `
                      <p>No more character suggestions available.</p>
                      <a href="/characters/explore" class="btn btn-sm btn-primary mt-2">Find Characters</a>
                      <button class="btn btn-sm btn-outline refresh-suggestions-btn mt-2">Refresh Suggestions</button>
                    `;
                    
                    suggestedList.appendChild(noSuggestionsItem);
                    
                    // Add refresh handler to the new button
                    const refreshBtn = noSuggestionsItem.querySelector('.refresh-suggestions-btn');
                    if (refreshBtn) {
                      refreshBtn.addEventListener('click', function() {
                        // Try again with retry=true to get broader results
                        refreshSuggestedCharacters(selectedCharId, true);
                      });
                    }
                  }
                })
                .catch(error => {
                  console.error('Error refreshing suggestions:', error);
                  
                  // Show error message
                  suggestedList.innerHTML = `
                    <li class="error-suggestions">
                      <p>Error loading suggestions. Please try again.</p>
                      <button class="btn btn-sm btn-outline refresh-suggestions-btn mt-2">Retry</button>
                    </li>
                  `;
                  
                  // Add retry handler
                  const retryBtn = suggestedList.querySelector('.refresh-suggestions-btn');
                  if (retryBtn) {
                    retryBtn.addEventListener('click', function() {
                      refreshSuggestedCharacters(selectedCharId);
                    });
                  }
                });
            }
            
            // Function to refresh with broader search parameters
            function retryWithBroaderSearch(selectedCharId) {
              console.log('Trying broader search for suggestions');
              
              fetch(`/social/suggested-characters?exclude=${selectedCharId}&retry=true`)
                .then(response => response.json())
                .then(data => {
                  // Process the response exactly as in refreshSuggestedCharacters
                  const suggestedList = document.querySelector('.suggested-list');
                  if (!suggestedList) return;
                  
                  suggestedList.innerHTML = '';
                  
                  if (data.success && data.characters && data.characters.length > 0) {
                    // Populate with new characters
                    data.characters.forEach(character => {
                      const item = document.createElement('li');
                      item.className = 'suggested-item';
                      item.setAttribute('data-character-id', character.id);
                      
                      item.innerHTML = `
                        <div class="suggested-avatar">
                          <img src="${character.avatar_url || character.url || '/img/default-character.svg'}" 
                               alt="${character.name}"
                               data-fallback="/img/default-character.svg"
                               onerror="handleImageError(this)" />
                        </div>
                        <div class="suggested-info">
                          <a href="/social/profile/${character.url || character.id}" class="suggested-name">${character.name}</a>
                          <span class="suggested-meta">by @${character.creator_username}</span>
                        </div>
                        <button class="btn btn-sm btn-outline follow-btn" data-character-id="${character.id}">
                          <i class="ph-duotone ph-plus"></i> Follow
                        </button>
                      `;
                      
                      suggestedList.appendChild(item);
                    });
                    
                    // Re-attach follow button handlers
                    attachFollowButtonHandlers();
                  } else {
                    // Still no suggestions, suggest creating more characters
                    const noSuggestionsItem = document.createElement('li');
                    noSuggestionsItem.className = 'no-suggestions';
                    noSuggestionsItem.innerHTML = `
                      <p>We couldn't find any suggestions right now.</p>
                      <a href="/characters/create" class="btn btn-sm btn-primary mt-2">Create a Character</a>
                      <a href="/characters/explore" class="btn btn-sm btn-outline mt-2">Browse All</a>
                    `;
                    
                    suggestedList.appendChild(noSuggestionsItem);
                  }
                })
                .catch(error => {
                  console.error('Error during broader search:', error);
                  // Handle error (same as in refreshSuggestedCharacters)
                });
            }
            
            // Function to attach follow button handlers to all follow buttons
            function attachFollowButtonHandlers() {
              // First check if we have a selected character
              const selectedCharacterId = parseInt(
                document.getElementById('client-selected-character')?.value || 
                sessionStorage.getItem('selectedCharacterId') || 
                '0'
              );
              
              if (!selectedCharacterId) {
                console.warn('No character selected. Follow buttons will prompt for character selection.');
              }
              
              // Attach handlers to all follow buttons in suggested characters
              document.querySelectorAll('.suggested-list .follow-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                  e.preventDefault();
                  
                  const targetCharacterId = this.getAttribute('data-character-id');
                  if (!targetCharacterId) return;
                  
                  if (!selectedCharacterId) {
                    // Show warning that they need to select a character first
                    alert('Please select a character to post as before following others.');
                    return;
                  }
                  
                  // Disable button and show loading state
                  this.disabled = true;
                  const originalText = this.innerHTML;
                  this.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Following...`;
                  
                  // Call follow endpoint
                  fetch('/social/follow', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                      followerId: selectedCharacterId,
                      followingId: targetCharacterId
                    })
                  })
                  .then(response => response.json())
                  .then(data => {
                    if (data.success) {
                      // Change button to show Following state
                      this.classList.remove('btn-outline');
                      this.classList.add('btn-primary');
                      this.innerHTML = `<i class="ph-duotone ph-check"></i> Following`;
                      
                      // Optionally remove this suggestion after a delay
                      setTimeout(() => {
                        const listItem = this.closest('.suggested-item');
                        if (listItem) {
                          listItem.style.opacity = '0';
                          setTimeout(() => {
                            listItem.remove();
                            
                            // If no more suggestions, show the no suggestions message
                            if (document.querySelectorAll('.suggested-item').length === 0) {
                              if (!document.querySelector('.suggested-list .no-suggestions')) {
                                refreshSuggestedCharacters(selectedCharacterId);
                              }
                            }
                          }, 300);
                        }
                      }, 1000);
                    } else {
                      // Show error and reset button
                      console.error('Follow error:', data.error);
                      this.disabled = false;
                      this.innerHTML = originalText;
                      
                      // If already following, update button state
                      if (data.error === 'Already following this character') {
                        this.classList.remove('btn-outline');
                        this.classList.add('btn-primary');
                        this.innerHTML = `<i class="ph-duotone ph-check"></i> Following`;
                      }
                    }
                  })
                  .catch(error => {
                    console.error('Error following character:', error);
                    // Reset button
                    this.disabled = false;
                    this.innerHTML = originalText;
                  });
                });
              });
              
              // Also attach handlers to the refresh-suggestions buttons
              document.querySelectorAll('.refresh-suggestions-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                  const selectedCharId = parseInt(
                    document.getElementById('client-selected-character')?.value || 
                    sessionStorage.getItem('selectedCharacterId') || 
                    '0'
                  );
                  refreshSuggestedCharacters(selectedCharId);
                });
              });
            }
            
            // Make sure to attach handlers when the page loads
            document.addEventListener('DOMContentLoaded', function() {
              attachFollowButtonHandlers();
            });
          </script>
          
          <% if (suggestedUsers && suggestedUsers.length > 0) { %>
            <% 
            // Server-side filtering of already followed characters
            const filteredSuggestions = suggestedUsers.filter(character => !character.is_following);
            %>
            
            <% if (filteredSuggestions.length > 0) { %>
              <% filteredSuggestions.forEach(character => { %>
                <li class="suggested-item" data-character-id="<%= character.id %>">
                  <div class="suggested-avatar">
                    <img src="<%= character.avatar_url || character.url || '/img/default-character.svg' %>" 
                         alt="<%= character.name %>"
                         data-fallback="/img/default-character.svg"
                         onerror="handleImageError(this)" />
                  </div>
                  <div class="suggested-info">
                    <a href="/social/profile/<%= character.url || character.id %>" class="suggested-name"><%= character.name %></a>
                    <span class="suggested-meta">by @<%= character.creator_username %></span>
                  </div>
                  <button class="btn btn-sm btn-outline follow-btn" data-character-id="<%= character.id %>">
                    <i class="ph-duotone ph-plus"></i> Follow
                  </button>
                </li>
              <% }) %>
            <% } else { %>
              <li class="no-suggestions">
                <p>No more character suggestions available.</p>
                <a href="/characters/explore" class="btn btn-sm btn-primary mt-2">Find Characters</a>
                <button class="btn btn-sm btn-outline refresh-btn mt-2">Refresh Suggestions</button>
              </li>
            <% } %>
          <% } else { %>
            <li class="no-suggestions">
              <p>No character suggestions available.</p>
              <a href="/characters/explore" class="btn btn-sm btn-primary mt-2">Find Characters</a>
            </li>
          <% } %>
        </ul>
      </div>
    </div>
  </div>
</div>

<script src="/js/social.js"></script>

<!-- Add additional script for suggested characters functionality -->
<script>
  // This will run in the browser after the page loads
  document.addEventListener('DOMContentLoaded', function() {
    // Get the currently selected character ID from session storage
    const clientSelectedCharacterId = parseInt(sessionStorage.getItem('selectedCharacterId') || '0');
    
    // Set the hidden input value - add safety check first
    const clientSelectedCharElement = document.getElementById('client-selected-character');
    if (clientSelectedCharElement) {
      clientSelectedCharElement.value = clientSelectedCharacterId;
      console.log('Client-side selected character ID:', clientSelectedCharacterId);
    } else {
      console.warn('client-selected-character element not found');
    }
    
    // Instead of just filtering, refresh suggestions from server to get properly filtered list
    if (clientSelectedCharacterId) {
      // Add a short delay to ensure the selection is properly initialized
      setTimeout(() => {
        if (typeof refreshSuggestedCharacters === 'function') {
          refreshSuggestedCharacters(clientSelectedCharacterId);
        } else {
          console.warn('refreshSuggestedCharacters function not available');
          // Fallback to simple client-side filtering
          if (typeof filterSuggestedCharacters === 'function') {
            filterSuggestedCharacters(clientSelectedCharacterId);
          } else {
            console.warn('filterSuggestedCharacters function not available');
          }
        }
      }, 500);
    } else {
      // Just use client-side filtering if no character selected
      if (typeof filterSuggestedCharacters === 'function') {
        filterSuggestedCharacters(clientSelectedCharacterId);
      }
    }
    
    // Also listen for character selection changes
    const characterSelect = document.getElementById('character-select');
    if (characterSelect) {
      characterSelect.addEventListener('change', function() {
        // When character changes, update the hidden field
        const newCharId = parseInt(this.value) || 0;
        const clientSelectedCharElement = document.getElementById('client-selected-character');
        if (clientSelectedCharElement) {
          clientSelectedCharElement.value = newCharId;
        }
        
        // Use server-side refresh instead of client filtering
        if (typeof refreshSuggestedCharacters === 'function' && newCharId) {
          refreshSuggestedCharacters(newCharId);
        } else {
          // Fallback to client-side filtering
          if (typeof filterSuggestedCharacters === 'function') {
            filterSuggestedCharacters(newCharId);
          }
        }
      });
    }
  });
  
  // Function to filter suggested characters in the client side
  function filterSuggestedCharacters(selectedCharId) {
    if (!selectedCharId) return;
    
    console.log('Filtering suggested characters, hiding character ID:', selectedCharId);
    
    // Hide any suggestion items that match the selected character ID
    let hiddenCount = 0;
    let totalCount = 0;
    const allItems = document.querySelectorAll('.suggested-item');
    totalCount = allItems.length;
    
    allItems.forEach(item => {
      const charId = parseInt(item.getAttribute('data-character-id'));
      if (charId === selectedCharId) {
        console.log('Hiding suggestion for selected character:', charId);
        item.style.display = 'none';
        hiddenCount++;
      } else {
        // Make sure other items are visible
        item.style.display = 'flex';
      }
    });
    
    // Check if we need to show the "no suggestions" message
    if (hiddenCount === totalCount || totalCount === 0) {
      console.log('All suggestions are hidden or none available, showing no suggestions message');
      
      // Check if we already have a no-suggestions element
      if (!document.querySelector('.suggested-list .no-suggestions')) {
        const noSuggestionsItem = document.createElement('li');
        noSuggestionsItem.className = 'no-suggestions';
        noSuggestionsItem.innerHTML = `
          <p>No more character suggestions available.</p>
          <a href="/characters/explore" class="btn btn-sm btn-primary mt-2">Find Characters</a>
          <button class="btn btn-sm btn-outline refresh-btn mt-2">Refresh Suggestions</button>
        `;
        
        // Add refresh handler
        noSuggestionsItem.querySelector('.refresh-btn').addEventListener('click', function() {
          if (typeof refreshSuggestedCharacters === 'function') {
            refreshSuggestedCharacters(selectedCharId);
          }
        });
        
        // Add it to the list
        document.querySelector('.suggested-list').appendChild(noSuggestionsItem);
      } else {
        // Make sure it's visible
        document.querySelector('.suggested-list .no-suggestions').style.display = 'block';
      }
    } else {
      // Hide the no-suggestions message if it exists
      const noSuggestions = document.querySelector('.suggested-list .no-suggestions');
      if (noSuggestions) {
        noSuggestions.style.display = 'none';
      }
    }
  }
  
  // Function to refresh suggested characters from the server
  function refreshSuggestedCharacters(selectedCharId) {
    console.log('Refreshing suggested characters, excluding:', selectedCharId);
    
    // Show a loading state on the suggestions list
    const suggestedList = document.querySelector('.suggested-list');
    if (!suggestedList) return;
    
    // Add loading indicator
    const loadingItem = document.createElement('li');
    loadingItem.className = 'loading-suggestions';
    loadingItem.innerHTML = `
      <div class="loading-spinner">
        <div class="spinner-border spinner-border-sm text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <p>Loading fresh suggestions...</p>
    `;
    
    // Clear existing list and show loading
    suggestedList.innerHTML = '';
    suggestedList.appendChild(loadingItem);
    
    // Make AJAX request to get new suggestions
    fetch(`/social/suggested-characters?exclude=${selectedCharId}`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        // Remove loading indicator
        suggestedList.innerHTML = '';
        
        if (data.success && data.characters && data.characters.length > 0) {
          // Populate with new characters
          data.characters.forEach(character => {
            const item = document.createElement('li');
            item.className = 'suggested-item';
            item.setAttribute('data-character-id', character.id);
            
            item.innerHTML = `
              <div class="suggested-avatar">
                <img src="${character.avatar_url || character.url || '/img/default-character.svg'}" 
                     alt="${character.name}"
                     data-fallback="/img/default-character.svg"
                     onerror="handleImageError(this)" />
              </div>
              <div class="suggested-info">
                <a href="/social/profile/${character.url || character.id}" class="suggested-name">${character.name}</a>
                <span class="suggested-meta">by @${character.creator_username}</span>
              </div>
              <button class="btn btn-sm btn-outline follow-btn" data-character-id="${character.id}">
                <i class="ph-duotone ph-plus"></i> Follow
              </button>
            `;
            
            suggestedList.appendChild(item);
          });
          
          // Re-attach follow button handlers
          attachFollowButtonHandlers();
        } else {
          // Show no suggestions message
          const noSuggestionsItem = document.createElement('li');
          noSuggestionsItem.className = 'no-suggestions';
          noSuggestionsItem.innerHTML = `
            <p>No more character suggestions available.</p>
            <a href="/characters/explore" class="btn btn-sm btn-primary mt-2">Find Characters</a>
            <button class="btn btn-sm btn-outline refresh-suggestions-btn mt-2">Refresh Suggestions</button>
          `;
          
          suggestedList.appendChild(noSuggestionsItem);
          
          // Add refresh handler to the new button
          const refreshBtn = noSuggestionsItem.querySelector('.refresh-suggestions-btn');
          if (refreshBtn) {
            refreshBtn.addEventListener('click', function() {
              // Try again with retry=true to get broader results
              refreshSuggestedCharacters(selectedCharId, true);
            });
          }
        }
      })
      .catch(error => {
        console.error('Error refreshing suggestions:', error);
        
        // Show error message
        suggestedList.innerHTML = `
          <li class="error-suggestions">
            <p>Error loading suggestions. Please try again.</p>
            <button class="btn btn-sm btn-outline refresh-suggestions-btn mt-2">Retry</button>
          </li>
        `;
        
        // Add retry handler
        const retryBtn = suggestedList.querySelector('.refresh-suggestions-btn');
        if (retryBtn) {
          retryBtn.addEventListener('click', function() {
            refreshSuggestedCharacters(selectedCharId);
          });
        }
      });
  }
  
  // Function to refresh with broader search parameters
  function retryWithBroaderSearch(selectedCharId) {
    console.log('Trying broader search for suggestions');
    
    fetch(`/social/suggested-characters?exclude=${selectedCharId}&retry=true`)
      .then(response => response.json())
      .then(data => {
        // Process the response exactly as in refreshSuggestedCharacters
        const suggestedList = document.querySelector('.suggested-list');
        if (!suggestedList) return;
        
        suggestedList.innerHTML = '';
        
        if (data.success && data.characters && data.characters.length > 0) {
          // Populate with new characters
          data.characters.forEach(character => {
            const item = document.createElement('li');
            item.className = 'suggested-item';
            item.setAttribute('data-character-id', character.id);
            
            item.innerHTML = `
              <div class="suggested-avatar">
                <img src="${character.avatar_url || character.url || '/img/default-character.svg'}" 
                     alt="${character.name}"
                     data-fallback="/img/default-character.svg"
                     onerror="handleImageError(this)" />
              </div>
              <div class="suggested-info">
                <a href="/social/profile/${character.url || character.id}" class="suggested-name">${character.name}</a>
                <span class="suggested-meta">by @${character.creator_username}</span>
              </div>
              <button class="btn btn-sm btn-outline follow-btn" data-character-id="${character.id}">
                <i class="ph-duotone ph-plus"></i> Follow
              </button>
            `;
            
            suggestedList.appendChild(item);
          });
          
          // Re-attach follow button handlers
          attachFollowButtonHandlers();
        } else {
          // Still no suggestions, suggest creating more characters
          const noSuggestionsItem = document.createElement('li');
          noSuggestionsItem.className = 'no-suggestions';
          noSuggestionsItem.innerHTML = `
            <p>We couldn't find any suggestions right now.</p>
            <a href="/characters/create" class="btn btn-sm btn-primary mt-2">Create a Character</a>
            <a href="/characters/explore" class="btn btn-sm btn-outline mt-2">Browse All</a>
          `;
          
          suggestedList.appendChild(noSuggestionsItem);
        }
      })
      .catch(error => {
        console.error('Error during broader search:', error);
        // Handle error (same as in refreshSuggestedCharacters)
      });
  }
  
  // Function to attach follow button handlers to all follow buttons
  function attachFollowButtonHandlers() {
    // First check if we have a selected character
    const selectedCharacterId = parseInt(
      document.getElementById('client-selected-character')?.value || 
      sessionStorage.getItem('selectedCharacterId') || 
      '0'
    );
    
    if (!selectedCharacterId) {
      console.warn('No character selected. Follow buttons will prompt for character selection.');
    }
    
    // Attach handlers to all follow buttons in suggested characters
    document.querySelectorAll('.suggested-list .follow-btn').forEach(btn => {
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        
        const targetCharacterId = this.getAttribute('data-character-id');
        if (!targetCharacterId) return;
        
        if (!selectedCharacterId) {
          // Show warning that they need to select a character first
          alert('Please select a character to post as before following others.');
          return;
        }
        
        // Disable button and show loading state
        this.disabled = true;
        const originalText = this.innerHTML;
        this.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Following...`;
        
        // Call follow endpoint
        fetch('/social/follow', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            followerId: selectedCharacterId,
            followingId: targetCharacterId
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Change button to show Following state
            this.classList.remove('btn-outline');
            this.classList.add('btn-primary');
            this.innerHTML = `<i class="ph-duotone ph-check"></i> Following`;
            
            // Optionally remove this suggestion after a delay
            setTimeout(() => {
              const listItem = this.closest('.suggested-item');
              if (listItem) {
                listItem.style.opacity = '0';
                setTimeout(() => {
                  listItem.remove();
                  
                  // If no more suggestions, show the no suggestions message
                  if (document.querySelectorAll('.suggested-item').length === 0) {
                    if (!document.querySelector('.suggested-list .no-suggestions')) {
                      refreshSuggestedCharacters(selectedCharacterId);
                    }
                  }
                }, 300);
              }
            }, 1000);
          } else {
            // Show error and reset button
            console.error('Follow error:', data.error);
            this.disabled = false;
            this.innerHTML = originalText;
            
            // If already following, update button state
            if (data.error === 'Already following this character') {
              this.classList.remove('btn-outline');
              this.classList.add('btn-primary');
              this.innerHTML = `<i class="ph-duotone ph-check"></i> Following`;
            }
          }
        })
        .catch(error => {
          console.error('Error following character:', error);
          // Reset button
          this.disabled = false;
          this.innerHTML = originalText;
        });
      });
    });
    
    // Also attach handlers to the refresh-suggestions buttons
    document.querySelectorAll('.refresh-suggestions-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const selectedCharId = parseInt(
          document.getElementById('client-selected-character')?.value || 
          sessionStorage.getItem('selectedCharacterId') || 
          '0'
        );
        refreshSuggestedCharacters(selectedCharId);
      });
    });
  }
  
  // Make sure to attach handlers when the page loads
  document.addEventListener('DOMContentLoaded', function() {
    attachFollowButtonHandlers();
  });
</script>