<div class="threads-container">
  <div class="threads-header">
    <h1>Writing Threads</h1>
    <p class="threads-description">
      Collaborate with other writers in organized conversation threads. Start a new thread or join existing ones.
    </p>
    
    <div class="threads-actions">
      <button class="btn btn-primary" id="create-thread-btn">
        <i class="ph-duotone ph-plus"></i> Create New Thread
      </button>
      
      <div class="threads-filter">
        <div class="filter-group">
          <label for="thread-filter">Filter:</label>
          <select id="thread-filter" class="form-control">
            <option value="all">All Threads</option>
            <option value="my-threads">My Threads</option>
            <option value="active">Active</option>
            <option value="archived">Archived</option>
          </select>
        </div>
        
        <div class="search-group">
          <input type="text" class="form-control" placeholder="Search threads..." id="thread-search">
          <button class="btn search-btn">
            <i class="ph-duotone ph-magnifying-glass"></i>
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <div class="threads-list">
    <% if (threads && threads.length > 0) { %>
      <% threads.forEach(thread => { %>
        <div class="thread-card">
          <div class="thread-card-header">
            <h3 class="thread-title">
              <a href="/writing/threads/<%= thread.id %>"><%= thread.title %></a>
            </h3>
            <span class="thread-status <%= thread.status %>"><%= thread.status %></span>
          </div>
          
          <div class="thread-card-body">
            <p class="thread-description formatted-text"><%= thread.description %></p>
            
            <div class="thread-meta">
              <div class="thread-participants">
                <span class="meta-label">Participants:</span>
                <span class="meta-value"><%= thread.participant_count || 0 %></span>
              </div>
              
              <div class="thread-messages">
                <span class="meta-label">Messages:</span>
                <span class="meta-value"><%= thread.message_count || 0 %></span>
              </div>
              
              <div class="thread-activity">
                <span class="meta-label">Last activity:</span>
                <span class="meta-value"><%= formatDate(thread.updated_at) %></span>
              </div>
            </div>
          </div>
          
          <div class="thread-card-footer">
            <div class="thread-creator">
              <span>Created by: </span>
              <a href="/profile/<%= thread.creator_id %>">
                <%= thread.creator_name %>
              </a>
              <% if (thread.character_id) { %>
                as
                <a href="/characters/<%= thread.character_id %>">
                  <%= thread.character_name %>
                </a>
              <% } %>
            </div>
            
            <div class="thread-actions">
              <% if (isParticipant(user.id, thread.id)) { %>
                <a href="/writing/threads/<%= thread.id %>" class="btn btn-outline btn-sm">Continue</a>
              <% } else if (thread.privacy !== 'private') { %>
                <button class="btn btn-primary btn-sm join-thread-btn" data-thread-id="<%= thread.id %>">Join</button>
              <% } %>
            </div>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="empty-state">
        <div class="empty-state-icon">
          <i class="ph-duotone ph-chat-teardrop-text"></i>
        </div>
        <h3>No threads found</h3>
        <p>Start a new thread to begin collaborative writing</p>
        <button class="btn btn-primary" id="empty-create-thread-btn">Create Thread</button>
      </div>
    <% } %>
  </div>
</div>

<!-- Create Thread Modal -->
<div class="modal" id="create-thread-modal">
  <div class="modal-content">
    <div class="modal-header">
      <h2>Create New Thread</h2>
      <button class="close-modal">&times;</button>
    </div>
    <div class="modal-body">
      <!-- Change form action to empty to ensure JS handles the submission -->
      <form id="create-thread-form" action="" method="POST">
        <!-- Add error display area -->
        <div class="alert alert-danger" id="create-thread-error" style="display: none;"></div>
        
        <div class="form-group">
          <label for="thread-title">Title</label>
          <input type="text" id="thread-title" name="title" class="form-control" required>
        </div>
        
        <div class="form-group">
          <label for="thread-description">Description</label>
          <textarea id="thread-description" name="description" class="form-control" rows="4"></textarea>
        </div>
        
        <div class="form-group">
          <label for="thread-privacy">Privacy</label>
          <select id="thread-privacy" name="privacy" class="form-control">
            <option value="public">Public - Anyone can view and join</option>
            <option value="invite-only">Invite Only - Only invited users can join</option>
            <option value="private">Private - Only visible to participants</option>
          </select>
        </div>
        
        <div class="form-group">
          <label>Post as Character (Optional)</label>
          <div class="character-selector">
            <% if (characters && characters.length > 0) { %>
              <% characters.forEach(character => { %>
                <div class="character-option">
                  <input type="radio" name="character_id" id="char-<%= character.id %>" value="<%= character.id %>">
                  <label for="char-<%= character.id %>" class="character-label">
                    <div class="character-avatar">
                      <% if (character.avatar_url) { %>
                        <img src="<%= character.avatar_url %>" alt="<%= character.name %>">
                      <% } else { %>
                        <div class="avatar-placeholder"><%= character.name.charAt(0) %></div>
                      <% } %>
                    </div>
                    <div class="character-info">
                      <span class="character-name"><%= character.name %></span>
                      <span class="character-role"><%= character.role %></span>
                    </div>
                  </label>
                </div>
              <% }); %>
            <% } %>
            
            <div class="character-option">
              <input type="radio" name="character_id" id="char-none" value="" checked>
              <label for="char-none" class="character-label">
                <div class="character-avatar">
                  <div class="avatar-placeholder">
                    <i class="ph-duotone ph-user"></i>
                  </div>
                </div>
                <div class="character-info">
                  <span class="character-name">Post as Yourself</span>
                  <span class="character-role">User</span>
                </div>
              </label>
            </div>
          </div>
        </div>
        
        <div class="form-actions">
          <button type="submit" class="btn btn-primary">Create Thread</button>
          <button type="button" class="btn btn-outline cancel-modal">Cancel</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  // Server-rendered data
  const userParticipations = `<%- JSON.stringify(typeof userParticipations !== 'undefined' ? userParticipations : []) %>`;

  // Format date helper function
  function formatDate(dateString) {
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        return 'Invalid date';
      }
      
      const now = new Date();
      const diffInMs = now - date;
      const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));
      
      if (diffInDays === 0) {
        return 'Today at ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
      } else if (diffInDays === 1) {
        return 'Yesterday at ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
      } else if (diffInDays < 7) {
        return diffInDays + ' days ago';
      } else {
        return date.toLocaleDateString([], {month: 'short', day: 'numeric', year: 'numeric'});
      }
    } catch (e) {
      console.error('Date formatting error:', e);
      return 'Unknown date';
    }
  }
  
  // Fixed isParticipant function
  function isParticipant(userId, threadId) {
    try {
      // Current code is trying to use the string directly
      const participations = typeof userParticipations !== 'undefined' ? 
                            (userParticipations instanceof Map ? 
                              Array.from(userParticipations.keys()) : 
                              []) : 
                            [];
      // Instead, parse the JSON string properly
      const parsedParticipations = JSON.parse(userParticipations);
      return parsedParticipations.includes(parseInt(threadId));
    } catch (e) {
      console.error('Error checking participation:', e);
      return false;
    }
  }
  
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Threads page loaded');
    
    // UI elements
    const createThreadBtn = document.getElementById('create-thread-btn');
    const emptyCreateThreadBtn = document.getElementById('empty-create-thread-btn');
    const createThreadModal = document.getElementById('create-thread-modal');
    const closeModal = document.querySelector('.close-modal');
    const cancelModal = document.querySelector('.cancel-modal');
    const createThreadForm = document.getElementById('create-thread-form');
    const threadFilter = document.getElementById('thread-filter');
    const threadSearch = document.getElementById('thread-search');
    const searchBtn = document.querySelector('.search-btn');
    const threadsList = document.querySelector('.threads-list');
    
    // Retry configuration
    const MAX_RETRIES = 3;
    let retryCount = 0;
    let retryTimeout = 2000; // Start with 2 seconds, will increase exponentially
    
    // Get user ID from the page
    const userId = `<%= typeof user !== 'undefined' && user.id ? user.id : 1 %>`;
    
    // Modal functions
    function showModal() {
      console.log('Showing create thread modal');
      createThreadModal.style.display = 'flex';
    }
    
    function hideModal() {
      console.log('Hiding create thread modal');
      createThreadModal.style.display = 'none';
    }
    
    // Modal event listeners
    if (createThreadBtn) {
      createThreadBtn.addEventListener('click', showModal);
    }
    
    if (emptyCreateThreadBtn) {
      emptyCreateThreadBtn.addEventListener('click', showModal);
    }
    
    if (closeModal) {
      closeModal.addEventListener('click', hideModal);
    }
    
    if (cancelModal) {
      cancelModal.addEventListener('click', hideModal);
    }
    
    window.addEventListener('click', function(event) {
      if (event.target === createThreadModal) {
        hideModal();
      }
    });
    
    // Fetch threads from the API - update to handle missing success property
    function fetchThreads() {
      console.log('Fetching threads...');
      threadsList.innerHTML = '<div class="loading-spinner">Loading threads...</div>';
      
      const filter = threadFilter ? threadFilter.value : 'all';
      const search = threadSearch ? threadSearch.value : '';
      
      console.log(`Fetching with filter: ${filter}, search: ${search}`);
      
      let initialThreads = [];
      try {
        initialThreads = `<%= JSON.stringify(threads || []) %>`;
        console.log('Using server-rendered threads:', initialThreads.length);
      } catch (e) {
        console.error('Error parsing server threads:', e);
      }
      
      if (initialThreads && initialThreads.length > 0) {
        updateThreadsList(initialThreads);
      }
      
      fetch(`/api/threads?filter=${encodeURIComponent(filter)}&search=${encodeURIComponent(search)}`)
        .then(response => {
          console.log('API response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          console.log('API response data:', data);
          retryCount = 0;
          retryTimeout = 2000;
          
          if (data) {
            let threadsData = [];
            
            if (data.success && Array.isArray(data.threads)) {
              threadsData = data.threads;
            } else if (Array.isArray(data.threads)) {
              threadsData = data.threads;
            } else if (Array.isArray(data)) {
              threadsData = data;
            }
            
            if (threadsData.length > 0) {
              updateThreadsList(threadsData);
            } else if (initialThreads.length === 0) {
              showEmptyState();
            }
          } else if (initialThreads.length === 0) {
            showEmptyState();
          }
        })
        .catch(error => {
          console.error('Error fetching threads:', error);
          if (initialThreads.length === 0) {
            showErrorState('Could not load threads. Please try again.');
          }
        });
    }
    
    function showEmptyState() {
      threadsList.innerHTML = `
        <div class="empty-state">
          <div class="empty-state-icon">
            <i class="ph-duotone ph-chat-teardrop-text"></i>
          </div>
          <h3>No threads found</h3>
          <p>Start a new thread to begin collaborative writing</p>
          <button class="btn btn-primary" id="empty-create-thread-btn">Create Thread</button>
        </div>
      `;
      
      const newEmptyBtn = document.getElementById('empty-create-thread-btn');
      if (newEmptyBtn) {
        newEmptyBtn.addEventListener('click', showModal);
      }
    }
    
    // Show general error state
    function showErrorState(message) {
      threadsList.innerHTML = `
        <div class="error-message">
          <div class="error-icon">
            <i class="ph-duotone ph-warning"></i>
          </div>
          <p>${message}</p>
          <button class="btn btn-primary retry-btn">Try Again</button>
        </div>
      `;
      
      const retryBtn = threadsList.querySelector('.retry-btn');
      if (retryBtn) {
        retryBtn.addEventListener('click', fetchThreads);
      }
    }
    
    // Update the threads list with new data
    function updateThreadsList(threads) {
      console.log('Updating threads list with', threads && threads.length ? threads.length : 0, 'threads');
      
      // Ensure threads is always an array
      if (typeof threads === 'string') {
        try {
          threads = JSON.parse(threads);
        } catch (e) {
          console.error('Failed to parse threads string:', e);
          threads = [];
        }
      }
      if (!Array.isArray(threads)) {
        threads = [];
      }
      
      if (!threadsList) {
        console.error('Threads list element not found');
        return;
      }
      
      if (!threads || threads.length === 0) {
        threadsList.innerHTML = `
          <div class="empty-state">
            <div class="empty-state-icon">
              <i class="ph-duotone ph-chat-teardrop-text"></i>
            </div>
            <h3>No threads found</h3>
            <p>Start a new thread to begin collaborative writing</p>
            <button class="btn btn-primary" id="empty-create-thread-btn">Create Thread</button>
          </div>
        `;
        
        const newEmptyBtn = document.getElementById('empty-create-thread-btn');
        if (newEmptyBtn) {
          newEmptyBtn.addEventListener('click', showModal);
        }
        return;
      }
      
      let threadsHtml = '';
      
      threads.forEach(thread => {
        try {
          const threadId = thread.id || 0;
          const threadTitle = (thread.title || 'Untitled Thread').replace(/</g, '&lt;').replace(/>/g, '&gt;');
          const threadStatus = (thread.status || 'unknown').replace(/</g, '&lt;').replace(/>/g, '&gt;');
          const threadDescription = (thread.description || 'No description');
          const threadParticipantCount = thread.participant_count || 0;
          const threadMessageCount = thread.message_count || 0;
          const threadUpdatedAt = thread.updated_at || new Date();
          const threadCreatorId = thread.creator_id || 0;
          const threadCreatorName = (thread.creator_name || 'Unknown User').replace(/</g, '&lt;').replace(/>/g, '&gt;');
          const threadCharacterId = thread.character_id || null;
          const threadCharacterName = thread.character_name ? thread.character_name.replace(/</g, '&lt;').replace(/>/g, '&gt;') : null;
          const threadPrivacy = thread.privacy || 'public';
          
          threadsHtml += `
            <div class="thread-card">
              <div class="thread-card-header">
                <h3 class="thread-title">
                  <a href="/writing/threads/${threadId}">${threadTitle}</a>
                </h3>
                <span class="thread-status ${threadStatus}">${threadStatus}</span>
              </div>
              
              <div class="thread-card-body">
                <p class="thread-description formatted-text">${formatSimpleMarkdown(threadDescription)}</p>
                
                <div class="thread-meta">
                  <div class="thread-participants">
                    <span class="meta-label">Participants:</span>
                    <span class="meta-value">${threadParticipantCount}</span>
                  </div>
                  
                  <div class="thread-messages">
                    <span class="meta-label">Messages:</span>
                    <span class="meta-value">${threadMessageCount}</span>
                  </div>
                  
                  <div class="thread-activity">
                    <span class="meta-label">Last activity:</span>
                    <span class="meta-value">${formatDate(threadUpdatedAt)}</span>
                  </div>
                </div>
              </div>
              
              <div class="thread-card-footer">
                <div class="thread-creator">
                  <span>Created by: </span>
                  <a href="/profile/${threadCreatorId}">
                    ${threadCreatorName}
                  </a>
                  ${threadCharacterId ? 
                    `as <a href="/characters/${threadCharacterId}">${threadCharacterName || 'Character'}</a>` : 
                    ''}
                </div>
                
                <div class="thread-actions">
                  ${isParticipant(userId, threadId) ? 
                    `<a href="/writing/threads/${threadId}" class="btn btn-outline btn-sm">Continue</a>` : 
                    (threadPrivacy !== 'private' ? 
                      `<button class="btn btn-primary btn-sm join-thread-btn" data-thread-id="${threadId}">Join</button>` : 
                      '')}
                </div>
              </div>
            </div>
          `;
        } catch (e) {
          console.error('Error building thread HTML:', e, thread);
          threadsHtml += `<div class="thread-card error">Error displaying thread</div>`;
        }
      });
      
      threadsList.innerHTML = threadsHtml;
      attachJoinListeners();
    }
    
    // Attach event listeners to join buttons
    function attachJoinListeners() {
      const joinButtons = document.querySelectorAll('.join-thread-btn');
      joinButtons.forEach(button => {
        button.addEventListener('click', function() {
          const threadId = this.getAttribute('data-thread-id');
          joinThread(threadId);
        });
      });
    }
    
    // Join a thread
    function joinThread(threadId) {
      console.log('Joining thread:', threadId);
      
      fetch(`/api/threads/${threadId}/join`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({})
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Join thread response:', data);
        if (data.success && data.redirect) {
          window.location.href = data.redirect;
        } else {
          console.error('Error joining thread:', data.message);
          alert('Could not join thread: ' + (data.message || 'Unknown error'));
        }
      })
      .catch(error => {
        console.error('Error joining thread:', error);
        alert('Could not join thread. Please try again.');
      });
    }
    
    // Add event listeners for filter and search
    if (threadFilter) {
      threadFilter.addEventListener('change', fetchThreads);
    }
    
    if (searchBtn) {
      searchBtn.addEventListener('click', function(e) {
        e.preventDefault();
        fetchThreads();
      });
    }
    
    if (threadSearch) {
      threadSearch.addEventListener('keyup', function(e) {
        if (e.key === 'Enter') {
          fetchThreads();
        }
      });
    }
    
    // Handle thread creation form submission
    if (createThreadForm) {
      createThreadForm.addEventListener('submit', function(e) {
        e.preventDefault();
        console.log('Creating new thread');
        
        const errorDisplay = document.getElementById('create-thread-error');
        errorDisplay.style.display = 'none';
        errorDisplay.textContent = '';
        
        const formData = new FormData(this);
        const threadData = {
          title: formData.get('title'),
          description: formData.get('description'),
          privacy: formData.get('privacy'),
          character_id: formData.get('character_id') || null
        };
        
        if (!threadData.title || threadData.title.trim() === '') {
          errorDisplay.textContent = 'Thread title is required';
          errorDisplay.style.display = 'block';
          return;
        }
        
        console.log('Submitting thread with data:', threadData);
        
        const submitButton = this.querySelector('button[type="submit"]');
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Creating...';
        }
        
        fetch('/writing/threads', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(threadData)
        })
        .then(response => {
          console.log('Create thread response status:', response.status);
          return response.json();
        })
        .then(data => {
          console.log('Create thread response data:', data);
          
          if (data.success) {
            console.log('Thread created successfully with ID:', data.threadId);
            window.location.href = `/writing/threads/${data.threadId}`;
          } else {
            errorDisplay.textContent = data.message || 'Error creating thread';
            errorDisplay.style.display = 'block';
            
            if (submitButton) {
              submitButton.disabled = false;
              submitButton.textContent = 'Create Thread';
            }
          }
        })
        .catch(error => {
          console.error('Error creating thread:', error);
          errorDisplay.textContent = 'Server error. Please try again.';
          errorDisplay.style.display = 'block';
          
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = 'Create Thread';
          }
        });
      });
    }
    
    console.log('Initializing threads page');
    
    const existingThreadCards = document.querySelectorAll('.thread-card');
    if (existingThreadCards.length > 0) {
      console.log('Found existing thread cards:', existingThreadCards.length);
      attachJoinListeners();
    } else {
      fetchThreads();
    }
    
    const style = document.createElement('style');
    style.textContent = `
      .connection-error {
        text-align: center;
        padding: 2rem;
        background: #f8f9fa;
        border-radius: 8px;
        margin: 2rem 0;
      }
      
      .error-icon {
        font-size: 3rem;
        color: #dc3545;
        margin-bottom: 1rem;
      }
      
      .retry-progress {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        margin: 1rem 0;
        overflow: hidden;
      }
      
      .retry-progress-bar {
        height: 100%;
        background: #007bff;
        transition: width 0.3s ease;
      }
      
      .error-actions {
        margin-top: 1.5rem;
        display: flex;
        justify-content: center;
        gap: 1rem;
      }
      
      .error-message {
        text-align: center;
        padding: 2rem;
        background: #f8f9fa;
        border-radius: 8px;
        margin: 2rem 0;
      }
    `;
    document.head.appendChild(style);
  });
</script>
  });
</script>
